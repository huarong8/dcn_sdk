// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractModel ContractModel
//
// swagger:model ContractModel
type ContractModel struct {

	// balance
	// Required: true
	Balance *int64 `json:"balance"`

	// contract address
	// Required: true
	ContractAddress *string `json:"contractAddress"`

	// contract creator
	// Required: true
	ContractCreator *string `json:"contractCreator"`

	// contract type
	// Required: true
	ContractType *string `json:"contractType"`

	// created block hash
	// Required: true
	CreatedBlockHash *string `json:"createdBlockHash"`

	// created block number
	// Required: true
	CreatedBlockNumber *int64 `json:"createdBlockNumber"`

	// created timestamp i s o
	// Required: true
	CreatedTimestampISO *string `json:"createdTimestampISO"`

	// created transaction hash
	// Required: true
	CreatedTransactionHash *string `json:"createdTransactionHash"`

	// eth balance
	// Required: true
	EthBalance *float64 `json:"ethBalance"`

	// file Id
	// Required: true
	FileID *string `json:"fileId"`

	// is private
	// Required: true
	IsPrivate *bool `json:"isPrivate"`

	// links
	// Required: true
	Links []*Link `json:"links"`

	// transaction count
	// Required: true
	TransactionCount *int64 `json:"transactionCount"`
}

// Validate validates this contract model
func (m *ContractModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBlockHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractModel) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateContractAddress(formats strfmt.Registry) error {

	if err := validate.Required("contractAddress", "body", m.ContractAddress); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateContractCreator(formats strfmt.Registry) error {

	if err := validate.Required("contractCreator", "body", m.ContractCreator); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateContractType(formats strfmt.Registry) error {

	if err := validate.Required("contractType", "body", m.ContractType); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateCreatedBlockHash(formats strfmt.Registry) error {

	if err := validate.Required("createdBlockHash", "body", m.CreatedBlockHash); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateCreatedBlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("createdBlockNumber", "body", m.CreatedBlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateCreatedTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("createdTimestampISO", "body", m.CreatedTimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateCreatedTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("createdTransactionHash", "body", m.CreatedTransactionHash); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateEthBalance(formats strfmt.Registry) error {

	if err := validate.Required("ethBalance", "body", m.EthBalance); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateFileID(formats strfmt.Registry) error {

	if err := validate.Required("fileId", "body", m.FileID); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateIsPrivate(formats strfmt.Registry) error {

	if err := validate.Required("isPrivate", "body", m.IsPrivate); err != nil {
		return err
	}

	return nil
}

func (m *ContractModel) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContractModel) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transactionCount", "body", m.TransactionCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contract model based on the context it is used
func (m *ContractModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractModel) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractModel) UnmarshalBinary(b []byte) error {
	var res ContractModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
