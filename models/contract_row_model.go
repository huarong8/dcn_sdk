// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractRowModel ContractRowModel
//
// swagger:model ContractRowModel
type ContractRowModel struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// contract type
	// Required: true
	ContractType *string `json:"contractType"`

	// created timestamp i s o
	// Required: true
	CreatedTimestampISO *string `json:"createdTimestampISO"`

	// created transaction
	// Required: true
	CreatedTransaction *string `json:"createdTransaction"`

	// last executed timestamp i s o
	// Required: true
	LastExecutedTimestampISO *string `json:"lastExecutedTimestampISO"`

	// last executed transaction
	// Required: true
	LastExecutedTransaction *string `json:"lastExecutedTransaction"`

	// links
	// Required: true
	Links []*Link `json:"links"`

	// transaction count
	// Required: true
	TransactionCount *int64 `json:"transactionCount"`
}

// Validate validates this contract row model
func (m *ContractRowModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutedTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractRowModel) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateContractType(formats strfmt.Registry) error {

	if err := validate.Required("contractType", "body", m.ContractType); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateCreatedTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("createdTimestampISO", "body", m.CreatedTimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateCreatedTransaction(formats strfmt.Registry) error {

	if err := validate.Required("createdTransaction", "body", m.CreatedTransaction); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateLastExecutedTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("lastExecutedTimestampISO", "body", m.LastExecutedTimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateLastExecutedTransaction(formats strfmt.Registry) error {

	if err := validate.Required("lastExecutedTransaction", "body", m.LastExecutedTransaction); err != nil {
		return err
	}

	return nil
}

func (m *ContractRowModel) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContractRowModel) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transactionCount", "body", m.TransactionCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contract row model based on the context it is used
func (m *ContractRowModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractRowModel) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractRowModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractRowModel) UnmarshalBinary(b []byte) error {
	var res ContractRowModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
