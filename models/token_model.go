// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenModel TokenModel
//
// swagger:model TokenModel
type TokenModel struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// contract type
	// Required: true
	ContractType *string `json:"contractType"`

	// decimals
	Decimals int32 `json:"decimals,omitempty"`

	// last executed timestamp i s o
	// Required: true
	LastExecutedTimestampISO *string `json:"lastExecutedTimestampISO"`

	// name
	Name string `json:"name,omitempty"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// total supply
	TotalSupply float64 `json:"totalSupply,omitempty"`

	// transaction count
	// Required: true
	TransactionCount *int64 `json:"transactionCount"`
}

// Validate validates this token model
func (m *TokenModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutedTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenModel) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateContractType(formats strfmt.Registry) error {

	if err := validate.Required("contractType", "body", m.ContractType); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateLastExecutedTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("lastExecutedTimestampISO", "body", m.LastExecutedTimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transactionCount", "body", m.TransactionCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token model based on context it is used
func (m *TokenModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenModel) UnmarshalBinary(b []byte) error {
	var res TokenModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
