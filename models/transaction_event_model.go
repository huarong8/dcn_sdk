// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionEventModel TransactionEventModel
//
// swagger:model TransactionEventModel
type TransactionEventModel struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// address links
	// Required: true
	AddressLinks []*Link `json:"addressLinks"`

	// block number
	// Required: true
	BlockNumber *int64 `json:"blockNumber"`

	// event name
	// Required: true
	EventName *string `json:"eventName"`

	// from
	// Required: true
	From *string `json:"from"`

	// from links
	// Required: true
	FromLinks []*Link `json:"fromLinks"`

	// links
	// Required: true
	Links []*Link `json:"links"`

	// parameters
	// Required: true
	Parameters []*EventParameters `json:"parameters"`

	// timestamp i s o
	// Required: true
	TimestampISO *string `json:"timestampISO"`

	// to
	// Required: true
	To *string `json:"to"`

	// to links
	// Required: true
	ToLinks []*Link `json:"toLinks"`

	// transaction hash
	// Required: true
	TransactionHash *string `json:"transactionHash"`
}

// Validate validates this transaction event model
func (m *TransactionEventModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionEventModel) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateAddressLinks(formats strfmt.Registry) error {

	if err := validate.Required("addressLinks", "body", m.AddressLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.AddressLinks); i++ {
		if swag.IsZero(m.AddressLinks[i]) { // not required
			continue
		}

		if m.AddressLinks[i] != nil {
			if err := m.AddressLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) validateBlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("blockNumber", "body", m.BlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("eventName", "body", m.EventName); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateFromLinks(formats strfmt.Registry) error {

	if err := validate.Required("fromLinks", "body", m.FromLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.FromLinks); i++ {
		if swag.IsZero(m.FromLinks[i]) { // not required
			continue
		}

		if m.FromLinks[i] != nil {
			if err := m.FromLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) validateTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("timestampISO", "body", m.TimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *TransactionEventModel) validateToLinks(formats strfmt.Registry) error {

	if err := validate.Required("toLinks", "body", m.ToLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.ToLinks); i++ {
		if swag.IsZero(m.ToLinks[i]) { // not required
			continue
		}

		if m.ToLinks[i] != nil {
			if err := m.ToLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) validateTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("transactionHash", "body", m.TransactionHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transaction event model based on the context it is used
func (m *TransactionEventModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFromLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionEventModel) contextValidateAddressLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddressLinks); i++ {

		if m.AddressLinks[i] != nil {
			if err := m.AddressLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) contextValidateFromLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FromLinks); i++ {

		if m.FromLinks[i] != nil {
			if err := m.FromLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionEventModel) contextValidateToLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToLinks); i++ {

		if m.ToLinks[i] != nil {
			if err := m.ToLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionEventModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionEventModel) UnmarshalBinary(b []byte) error {
	var res TransactionEventModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
