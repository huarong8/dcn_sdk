// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockModel BlockModel
//
// swagger:model BlockModel
type BlockModel struct {

	// date verified
	// Required: true
	DateVerified *int64 `json:"dateVerified"`

	// difficulty
	// Required: true
	Difficulty *int64 `json:"difficulty"`

	// extra data
	// Required: true
	ExtraData *string `json:"extraData"`

	// gas limit
	// Required: true
	GasLimit *int64 `json:"gasLimit"`

	// gas used
	// Required: true
	GasUsed *int64 `json:"gasUsed"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// logs bloom
	// Required: true
	LogsBloom *string `json:"logsBloom"`

	// miner
	// Required: true
	Miner *string `json:"miner"`

	// mix hash
	MixHash string `json:"mixHash,omitempty"`

	// number
	// Required: true
	Number *int64 `json:"number"`

	// parent hash
	// Required: true
	ParentHash *string `json:"parentHash"`

	// receipt root
	// Required: true
	ReceiptRoot *string `json:"receiptRoot"`

	// sha3 uncles
	// Required: true
	Sha3Uncles *string `json:"sha3Uncles"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// state root
	// Required: true
	StateRoot *string `json:"stateRoot"`

	// timestamp i s o
	// Required: true
	TimestampISO *string `json:"timestampISO"`

	// timestamp verified i s o
	// Required: true
	TimestampVerifiedISO *string `json:"timestampVerifiedISO"`

	// total difficulty
	// Required: true
	TotalDifficulty *int64 `json:"totalDifficulty"`

	// transaction count
	// Required: true
	TransactionCount *int32 `json:"transactionCount"`

	// transactions root
	// Required: true
	TransactionsRoot *string `json:"transactionsRoot"`

	// uncles
	// Required: true
	Uncles []string `json:"uncles"`
}

// Validate validates this block model
func (m *BlockModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateVerified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDifficulty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogsBloom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiptRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSha3Uncles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampVerifiedISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDifficulty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUncles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockModel) validateDateVerified(formats strfmt.Registry) error {

	if err := validate.Required("dateVerified", "body", m.DateVerified); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateDifficulty(formats strfmt.Registry) error {

	if err := validate.Required("difficulty", "body", m.Difficulty); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateExtraData(formats strfmt.Registry) error {

	if err := validate.Required("extraData", "body", m.ExtraData); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateGasLimit(formats strfmt.Registry) error {

	if err := validate.Required("gasLimit", "body", m.GasLimit); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateGasUsed(formats strfmt.Registry) error {

	if err := validate.Required("gasUsed", "body", m.GasUsed); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateLogsBloom(formats strfmt.Registry) error {

	if err := validate.Required("logsBloom", "body", m.LogsBloom); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateMiner(formats strfmt.Registry) error {

	if err := validate.Required("miner", "body", m.Miner); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateParentHash(formats strfmt.Registry) error {

	if err := validate.Required("parentHash", "body", m.ParentHash); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateReceiptRoot(formats strfmt.Registry) error {

	if err := validate.Required("receiptRoot", "body", m.ReceiptRoot); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateSha3Uncles(formats strfmt.Registry) error {

	if err := validate.Required("sha3Uncles", "body", m.Sha3Uncles); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateStateRoot(formats strfmt.Registry) error {

	if err := validate.Required("stateRoot", "body", m.StateRoot); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("timestampISO", "body", m.TimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateTimestampVerifiedISO(formats strfmt.Registry) error {

	if err := validate.Required("timestampVerifiedISO", "body", m.TimestampVerifiedISO); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateTotalDifficulty(formats strfmt.Registry) error {

	if err := validate.Required("totalDifficulty", "body", m.TotalDifficulty); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transactionCount", "body", m.TransactionCount); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateTransactionsRoot(formats strfmt.Registry) error {

	if err := validate.Required("transactionsRoot", "body", m.TransactionsRoot); err != nil {
		return err
	}

	return nil
}

func (m *BlockModel) validateUncles(formats strfmt.Registry) error {

	if err := validate.Required("uncles", "body", m.Uncles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this block model based on context it is used
func (m *BlockModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockModel) UnmarshalBinary(b []byte) error {
	var res BlockModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
