// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ERC20TransactionRowModel ERC20TransactionRowModel
//
// swagger:model ERC20TransactionRowModel
type ERC20TransactionRowModel struct {

	// from
	// Required: true
	From *string `json:"from"`

	// from links
	// Required: true
	FromLinks []*Link `json:"fromLinks"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// quantity
	// Required: true
	Quantity *string `json:"quantity"`

	// quantity raw
	// Required: true
	QuantityRaw *float64 `json:"quantityRaw"`

	// timestamp i s o
	// Required: true
	TimestampISO *string `json:"timestampISO"`

	// to
	// Required: true
	To *string `json:"to"`

	// to links
	// Required: true
	ToLinks []*Link `json:"toLinks"`
}

// Validate validates this e r c20 transaction row model
func (m *ERC20TransactionRowModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampISO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ERC20TransactionRowModel) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateFromLinks(formats strfmt.Registry) error {

	if err := validate.Required("fromLinks", "body", m.FromLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.FromLinks); i++ {
		if swag.IsZero(m.FromLinks[i]) { // not required
			continue
		}

		if m.FromLinks[i] != nil {
			if err := m.FromLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ERC20TransactionRowModel) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateQuantityRaw(formats strfmt.Registry) error {

	if err := validate.Required("quantityRaw", "body", m.QuantityRaw); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateTimestampISO(formats strfmt.Registry) error {

	if err := validate.Required("timestampISO", "body", m.TimestampISO); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *ERC20TransactionRowModel) validateToLinks(formats strfmt.Registry) error {

	if err := validate.Required("toLinks", "body", m.ToLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.ToLinks); i++ {
		if swag.IsZero(m.ToLinks[i]) { // not required
			continue
		}

		if m.ToLinks[i] != nil {
			if err := m.ToLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this e r c20 transaction row model based on the context it is used
func (m *ERC20TransactionRowModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFromLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ERC20TransactionRowModel) contextValidateFromLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FromLinks); i++ {

		if m.FromLinks[i] != nil {
			if err := m.FromLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ERC20TransactionRowModel) contextValidateToLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToLinks); i++ {

		if m.ToLinks[i] != nil {
			if err := m.ToLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ERC20TransactionRowModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ERC20TransactionRowModel) UnmarshalBinary(b []byte) error {
	var res ERC20TransactionRowModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
