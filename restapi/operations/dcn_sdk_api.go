// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"dcn_sdk/api/handlers"
	"fmt"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"net/http"
	"strings"

	"dcn_sdk/restapi/operations/account_controller"
	"dcn_sdk/restapi/operations/account_mapping_controller"
	"dcn_sdk/restapi/operations/account_transactions_controller"
	"dcn_sdk/restapi/operations/block_controller"
	"dcn_sdk/restapi/operations/block_transactions_controller"
	"dcn_sdk/restapi/operations/configuration_controller"
	"dcn_sdk/restapi/operations/contract_controller"
	"dcn_sdk/restapi/operations/contract_events_controller"
	"dcn_sdk/restapi/operations/contract_transactions_controller"
	"dcn_sdk/restapi/operations/dashboard_tokens_totals_controller"
	"dcn_sdk/restapi/operations/dashboard_totals_controller"
	"dcn_sdk/restapi/operations/dashboard_transactions_totals_controller"
	"dcn_sdk/restapi/operations/erc_20_transfers_controller"
	"dcn_sdk/restapi/operations/erc_721_transfers_controller"
	"dcn_sdk/restapi/operations/erc_777_transfers_controller"
	"dcn_sdk/restapi/operations/events_controller"
	"dcn_sdk/restapi/operations/gas_oracle_controller"
	"dcn_sdk/restapi/operations/index_controller"
	"dcn_sdk/restapi/operations/metadata_controller"
	"dcn_sdk/restapi/operations/node_controller"
	"dcn_sdk/restapi/operations/search_controller"
	"dcn_sdk/restapi/operations/token_controller"
	"dcn_sdk/restapi/operations/token_events_controller"
	"dcn_sdk/restapi/operations/token_transactions_controller"
	"dcn_sdk/restapi/operations/transaction_controller"
	"dcn_sdk/restapi/operations/transaction_events_controller"
)

// NewDcnSdkAPI creates a new DcnSdk instance
func NewDcnSdkAPI(spec *loads.Document) *DcnSdkAPI {
	return &DcnSdkAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		//默认是application/json mime
		//EmptyProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
		//	enc := json.NewEncoder(writer)
		//	enc.SetEscapeHTML(false)
		//	return enc.Encode(data)
		//	//return errors.NotImplemented(" producer has not yet been implemented...")
		//}),
		EmptyProducer: runtime.TextProducer(),

		AccountMappingControllerAddAccountUsingPOSTHandler: account_mapping_controller.AddAccountUsingPOSTHandlerFunc(func(params account_mapping_controller.AddAccountUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation account_mapping_controller.AddAccountUsingPOST has not yet been implemented")
		}),
		AccountMappingControllerDeleteAccountUsingDELETEHandler: account_mapping_controller.DeleteAccountUsingDELETEHandlerFunc(func(params account_mapping_controller.DeleteAccountUsingDELETEParams) middleware.Responder {
			return middleware.NotImplemented("operation account_mapping_controller.DeleteAccountUsingDELETE has not yet been implemented")
		}),
		MetadataControllerDeleteMetadataUsingDELETEHandler: metadata_controller.DeleteMetadataUsingDELETEHandlerFunc(func(params metadata_controller.DeleteMetadataUsingDELETEParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata_controller.DeleteMetadataUsingDELETE has not yet been implemented")
		}),
		NodeControllerDetailsUsingGETHandler: node_controller.DetailsUsingGETHandlerFunc(func(params node_controller.DetailsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation node_controller.DetailsUsingGET has not yet been implemented")
		}),
		AccountMappingControllerEditAccountUsingPUTHandler: account_mapping_controller.EditAccountUsingPUTHandlerFunc(func(params account_mapping_controller.EditAccountUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation account_mapping_controller.EditAccountUsingPUT has not yet been implemented")
		}),
		IndexControllerErrorPageUsingGETHandler: index_controller.ErrorPageUsingGETHandlerFunc(func(params index_controller.ErrorPageUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation index_controller.ErrorPageUsingGET has not yet been implemented")
		}),
		AccountTransactionsControllerFindAccountTransactionsUsingGETHandler: account_transactions_controller.FindAccountTransactionsUsingGETHandlerFunc(func(params account_transactions_controller.FindAccountTransactionsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation account_transactions_controller.FindAccountTransactionsUsingGET has not yet been implemented")
		}),
		AccountMappingControllerFindAccountsUsingGETHandler: account_mapping_controller.FindAccountsUsingGETHandlerFunc(func(params account_mapping_controller.FindAccountsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation account_mapping_controller.FindAccountsUsingGET has not yet been implemented")
		}),
		BlockControllerFindBlocksUsingGETHandler: block_controller.FindBlocksUsingGETHandlerFunc(func(params block_controller.FindBlocksUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation block_controller.FindBlocksUsingGET has not yet been implemented")
		}),
		ContractTransactionsControllerFindContractTransactionsUsingGETHandler: contract_transactions_controller.FindContractTransactionsUsingGETHandlerFunc(func(params contract_transactions_controller.FindContractTransactionsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation contract_transactions_controller.FindContractTransactionsUsingGET has not yet been implemented")
		}),
		TokenTransactionsControllerFindContractTransactionsUsingGET1Handler: token_transactions_controller.FindContractTransactionsUsingGET1HandlerFunc(func(params token_transactions_controller.FindContractTransactionsUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation token_transactions_controller.FindContractTransactionsUsingGET1 has not yet been implemented")
		}),
		MetadataControllerFindContractsBySwarmHashUsingGETHandler: metadata_controller.FindContractsBySwarmHashUsingGETHandlerFunc(func(params metadata_controller.FindContractsBySwarmHashUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata_controller.FindContractsBySwarmHashUsingGET has not yet been implemented")
		}),
		ContractControllerFindContractsUsingGETHandler: contract_controller.FindContractsUsingGETHandlerFunc(func(params contract_controller.FindContractsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation contract_controller.FindContractsUsingGET has not yet been implemented")
		}),
		Erc20TransfersControllerFindERC20TransfersUsingGETHandler: erc_20_transfers_controller.FindERC20TransfersUsingGETHandlerFunc(func(params erc_20_transfers_controller.FindERC20TransfersUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation erc_20_transfers_controller.FindERC20TransfersUsingGET has not yet been implemented")
		}),
		Erc721TransfersControllerFindERC721TransfersUsingGETHandler: erc_721_transfers_controller.FindERC721TransfersUsingGETHandlerFunc(func(params erc_721_transfers_controller.FindERC721TransfersUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation erc_721_transfers_controller.FindERC721TransfersUsingGET has not yet been implemented")
		}),
		Erc777TransfersControllerFindERC777TransfersUsingGETHandler: erc_777_transfers_controller.FindERC777TransfersUsingGETHandlerFunc(func(params erc_777_transfers_controller.FindERC777TransfersUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation erc_777_transfers_controller.FindERC777TransfersUsingGET has not yet been implemented")
		}),
		MetadataControllerFindMetadataUsingGETHandler: metadata_controller.FindMetadataUsingGETHandlerFunc(func(params metadata_controller.FindMetadataUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata_controller.FindMetadataUsingGET has not yet been implemented")
		}),
		TokenControllerFindTokensUsingGETHandler: token_controller.FindTokensUsingGETHandlerFunc(func(params token_controller.FindTokensUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation token_controller.FindTokensUsingGET has not yet been implemented")
		}),
		TransactionControllerFindTransactionsUsingGETHandler: transaction_controller.FindTransactionsUsingGETHandlerFunc(func(params transaction_controller.FindTransactionsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation transaction_controller.FindTransactionsUsingGET has not yet been implemented")
		}),
		ConfigurationControllerFrontendConfigurationUsingGETHandler: configuration_controller.FrontendConfigurationUsingGETHandlerFunc(func(params configuration_controller.FrontendConfigurationUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation configuration_controller.FrontendConfigurationUsingGET has not yet been implemented")
		}),
		GasOracleControllerGasPriceInfoUsingGETHandler: gas_oracle_controller.GasPriceInfoUsingGETHandlerFunc(func(params gas_oracle_controller.GasPriceInfoUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation gas_oracle_controller.GasPriceInfoUsingGET has not yet been implemented")
		}),
		AccountControllerGetAccountUsingGETHandler: account_controller.GetAccountUsingGETHandlerFunc(func(params account_controller.GetAccountUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation account_controller.GetAccountUsingGET has not yet been implemented")
		}),
		AccountMappingControllerGetAccountUsingGET1Handler: account_mapping_controller.GetAccountUsingGET1HandlerFunc(func(params account_mapping_controller.GetAccountUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation account_mapping_controller.GetAccountUsingGET1 has not yet been implemented")
		}),
		BlockTransactionsControllerGetBlockTransactionsUsingGETHandler: block_transactions_controller.GetBlockTransactionsUsingGETHandlerFunc(func(params block_transactions_controller.GetBlockTransactionsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation block_transactions_controller.GetBlockTransactionsUsingGET has not yet been implemented")
		}),
		//BlockControllerGetBlockUsingGETHandler: block_controller.GetBlockUsingGETHandlerFunc(func(params block_controller.GetBlockUsingGETParams) middleware.Responder {
		//	return block_controller.NewGetBlockUsingGETOK()
		//	//return middleware.NotImplemented("operation block_controller.GetBlockUsingGET has not yet been implemented")
		//}),
		BlockControllerGetBlockUsingGETHandler: handlers.NewApiGetBlockUsing(),
		ContractEventsControllerGetContractEventsUsingGETHandler: contract_events_controller.GetContractEventsUsingGETHandlerFunc(func(params contract_events_controller.GetContractEventsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation contract_events_controller.GetContractEventsUsingGET has not yet been implemented")
		}),
		//ContractControllerGetContractUsingGETHandler: index_controller.NewIndexUsingGETcontract_controller.GetContractUsingGETHandlerFunc(func(params contract_controller.GetContractUsingGETParams) middleware.Responder {
		//	return middleware.NotImplemented("operation contract_controller.GetContractUsingGET has not yet been implemented")
		//}),
		DashboardTotalsControllerGetDashboardTotalsUsingGETHandler: dashboard_totals_controller.GetDashboardTotalsUsingGETHandlerFunc(func(params dashboard_totals_controller.GetDashboardTotalsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation dashboard_totals_controller.GetDashboardTotalsUsingGET has not yet been implemented")
		}),
		EventsControllerGetEventsUsingGETHandler: events_controller.GetEventsUsingGETHandlerFunc(func(params events_controller.GetEventsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation events_controller.GetEventsUsingGET has not yet been implemented")
		}),
		MetadataControllerGetMetadataUsingGETHandler: metadata_controller.GetMetadataUsingGETHandlerFunc(func(params metadata_controller.GetMetadataUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata_controller.GetMetadataUsingGET has not yet been implemented")
		}),
		TokenEventsControllerGetTokenEventsUsingGETHandler: token_events_controller.GetTokenEventsUsingGETHandlerFunc(func(params token_events_controller.GetTokenEventsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation token_events_controller.GetTokenEventsUsingGET has not yet been implemented")
		}),
		DashboardTokensTotalsControllerGetTokenTotalsUsingGETHandler: dashboard_tokens_totals_controller.GetTokenTotalsUsingGETHandlerFunc(func(params dashboard_tokens_totals_controller.GetTokenTotalsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation dashboard_tokens_totals_controller.GetTokenTotalsUsingGET has not yet been implemented")
		}),
		TokenControllerGetTokenUsingGETHandler: token_controller.GetTokenUsingGETHandlerFunc(func(params token_controller.GetTokenUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation token_controller.GetTokenUsingGET has not yet been implemented")
		}),
		DashboardTransactionsTotalsControllerGetTotalsUsingGETHandler: dashboard_transactions_totals_controller.GetTotalsUsingGETHandlerFunc(func(params dashboard_transactions_totals_controller.GetTotalsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation dashboard_transactions_totals_controller.GetTotalsUsingGET has not yet been implemented")
		}),
		DashboardTransactionsTotalsControllerGetTotalsUsingGET1Handler: dashboard_transactions_totals_controller.GetTotalsUsingGET1HandlerFunc(func(params dashboard_transactions_totals_controller.GetTotalsUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation dashboard_transactions_totals_controller.GetTotalsUsingGET1 has not yet been implemented")
		}),
		TransactionEventsControllerGetTransactionEventsUsingGETHandler: transaction_events_controller.GetTransactionEventsUsingGETHandlerFunc(func(params transaction_events_controller.GetTransactionEventsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation transaction_events_controller.GetTransactionEventsUsingGET has not yet been implemented")
		}),
		TransactionControllerGetTransactionUsingGETHandler: transaction_controller.GetTransactionUsingGETHandlerFunc(func(params transaction_controller.GetTransactionUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation transaction_controller.GetTransactionUsingGET has not yet been implemented")
		}),
		//IndexControllerHomePageUsingGETHandler: index_controller.HomePageUsingGETHandlerFunc(func(params index_controller.HomePageUsingGETParams) middleware.Responder {
		//	return middleware.NotImplemented("operation index_controller.HomePageUsingGET has not yet been implemented")
		//}),
		//IndexControllerIndexUsingGETHandler: index_controller.IndexUsingGETHandlerFunc(func(params index_controller.IndexUsingGETParams) middleware.Responder {
		//	return middleware.NotImplemented("operation index_controller.IndexUsingGET has not yet been implemented")
		//}),
		SearchControllerSearchUsingGETHandler: search_controller.SearchUsingGETHandlerFunc(func(params search_controller.SearchUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation search_controller.SearchUsingGET has not yet been implemented")
		}),
		SearchControllerSearchUsingGET1Handler: search_controller.SearchUsingGET1HandlerFunc(func(params search_controller.SearchUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation search_controller.SearchUsingGET1 has not yet been implemented")
		}),
		MetadataControllerUploadMetadataUsingPOSTHandler: metadata_controller.UploadMetadataUsingPOSTHandlerFunc(func(params metadata_controller.UploadMetadataUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata_controller.UploadMetadataUsingPOST has not yet been implemented")
		}),
	}
}

/*DcnSdkAPI web3labs.com Epirus explorer REST API. */
type DcnSdkAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	//  registers a producer for theEmptyProducer following mime types:
	//   - */*
	EmptyProducer runtime.Producer

	// AccountMappingControllerAddAccountUsingPOSTHandler sets the operation handler for the add account using p o s t operation
	AccountMappingControllerAddAccountUsingPOSTHandler account_mapping_controller.AddAccountUsingPOSTHandler
	// AccountMappingControllerDeleteAccountUsingDELETEHandler sets the operation handler for the delete account using d e l e t e operation
	AccountMappingControllerDeleteAccountUsingDELETEHandler account_mapping_controller.DeleteAccountUsingDELETEHandler
	// MetadataControllerDeleteMetadataUsingDELETEHandler sets the operation handler for the delete metadata using d e l e t e operation
	MetadataControllerDeleteMetadataUsingDELETEHandler metadata_controller.DeleteMetadataUsingDELETEHandler
	// NodeControllerDetailsUsingGETHandler sets the operation handler for the details using g e t operation
	NodeControllerDetailsUsingGETHandler node_controller.DetailsUsingGETHandler
	// AccountMappingControllerEditAccountUsingPUTHandler sets the operation handler for the edit account using p u t operation
	AccountMappingControllerEditAccountUsingPUTHandler account_mapping_controller.EditAccountUsingPUTHandler
	// IndexControllerErrorPageUsingGETHandler sets the operation handler for the error page using g e t operation
	IndexControllerErrorPageUsingGETHandler index_controller.ErrorPageUsingGETHandler
	// AccountTransactionsControllerFindAccountTransactionsUsingGETHandler sets the operation handler for the find account transactions using g e t operation
	AccountTransactionsControllerFindAccountTransactionsUsingGETHandler account_transactions_controller.FindAccountTransactionsUsingGETHandler
	// AccountMappingControllerFindAccountsUsingGETHandler sets the operation handler for the find accounts using g e t operation
	AccountMappingControllerFindAccountsUsingGETHandler account_mapping_controller.FindAccountsUsingGETHandler
	// BlockControllerFindBlocksUsingGETHandler sets the operation handler for the find blocks using g e t operation
	BlockControllerFindBlocksUsingGETHandler block_controller.FindBlocksUsingGETHandler
	// ContractTransactionsControllerFindContractTransactionsUsingGETHandler sets the operation handler for the find contract transactions using g e t operation
	ContractTransactionsControllerFindContractTransactionsUsingGETHandler contract_transactions_controller.FindContractTransactionsUsingGETHandler
	// TokenTransactionsControllerFindContractTransactionsUsingGET1Handler sets the operation handler for the find contract transactions using g e t 1 operation
	TokenTransactionsControllerFindContractTransactionsUsingGET1Handler token_transactions_controller.FindContractTransactionsUsingGET1Handler
	// MetadataControllerFindContractsBySwarmHashUsingGETHandler sets the operation handler for the find contracts by swarm hash using g e t operation
	MetadataControllerFindContractsBySwarmHashUsingGETHandler metadata_controller.FindContractsBySwarmHashUsingGETHandler
	// ContractControllerFindContractsUsingGETHandler sets the operation handler for the find contracts using g e t operation
	ContractControllerFindContractsUsingGETHandler contract_controller.FindContractsUsingGETHandler
	// Erc20TransfersControllerFindERC20TransfersUsingGETHandler sets the operation handler for the find e r c20 transfers using g e t operation
	Erc20TransfersControllerFindERC20TransfersUsingGETHandler erc_20_transfers_controller.FindERC20TransfersUsingGETHandler
	// Erc721TransfersControllerFindERC721TransfersUsingGETHandler sets the operation handler for the find e r c721 transfers using g e t operation
	Erc721TransfersControllerFindERC721TransfersUsingGETHandler erc_721_transfers_controller.FindERC721TransfersUsingGETHandler
	// Erc777TransfersControllerFindERC777TransfersUsingGETHandler sets the operation handler for the find e r c777 transfers using g e t operation
	Erc777TransfersControllerFindERC777TransfersUsingGETHandler erc_777_transfers_controller.FindERC777TransfersUsingGETHandler
	// MetadataControllerFindMetadataUsingGETHandler sets the operation handler for the find metadata using g e t operation
	MetadataControllerFindMetadataUsingGETHandler metadata_controller.FindMetadataUsingGETHandler
	// TokenControllerFindTokensUsingGETHandler sets the operation handler for the find tokens using g e t operation
	TokenControllerFindTokensUsingGETHandler token_controller.FindTokensUsingGETHandler
	// TransactionControllerFindTransactionsUsingGETHandler sets the operation handler for the find transactions using g e t operation
	TransactionControllerFindTransactionsUsingGETHandler transaction_controller.FindTransactionsUsingGETHandler
	// ConfigurationControllerFrontendConfigurationUsingGETHandler sets the operation handler for the frontend configuration using g e t operation
	ConfigurationControllerFrontendConfigurationUsingGETHandler configuration_controller.FrontendConfigurationUsingGETHandler
	// GasOracleControllerGasPriceInfoUsingGETHandler sets the operation handler for the gas price info using g e t operation
	GasOracleControllerGasPriceInfoUsingGETHandler gas_oracle_controller.GasPriceInfoUsingGETHandler
	// AccountControllerGetAccountUsingGETHandler sets the operation handler for the get account using g e t operation
	AccountControllerGetAccountUsingGETHandler account_controller.GetAccountUsingGETHandler
	// AccountMappingControllerGetAccountUsingGET1Handler sets the operation handler for the get account using g e t 1 operation
	AccountMappingControllerGetAccountUsingGET1Handler account_mapping_controller.GetAccountUsingGET1Handler
	// BlockTransactionsControllerGetBlockTransactionsUsingGETHandler sets the operation handler for the get block transactions using g e t operation
	BlockTransactionsControllerGetBlockTransactionsUsingGETHandler block_transactions_controller.GetBlockTransactionsUsingGETHandler
	// BlockControllerGetBlockUsingGETHandler sets the operation handler for the get block using g e t operation
	BlockControllerGetBlockUsingGETHandler block_controller.GetBlockUsingGETHandler
	// ContractEventsControllerGetContractEventsUsingGETHandler sets the operation handler for the get contract events using g e t operation
	ContractEventsControllerGetContractEventsUsingGETHandler contract_events_controller.GetContractEventsUsingGETHandler
	// ContractControllerGetContractUsingGETHandler sets the operation handler for the get contract using g e t operation
	ContractControllerGetContractUsingGETHandler contract_controller.GetContractUsingGETHandler
	// DashboardTotalsControllerGetDashboardTotalsUsingGETHandler sets the operation handler for the get dashboard totals using g e t operation
	DashboardTotalsControllerGetDashboardTotalsUsingGETHandler dashboard_totals_controller.GetDashboardTotalsUsingGETHandler
	// EventsControllerGetEventsUsingGETHandler sets the operation handler for the get events using g e t operation
	EventsControllerGetEventsUsingGETHandler events_controller.GetEventsUsingGETHandler
	// MetadataControllerGetMetadataUsingGETHandler sets the operation handler for the get metadata using g e t operation
	MetadataControllerGetMetadataUsingGETHandler metadata_controller.GetMetadataUsingGETHandler
	// TokenEventsControllerGetTokenEventsUsingGETHandler sets the operation handler for the get token events using g e t operation
	TokenEventsControllerGetTokenEventsUsingGETHandler token_events_controller.GetTokenEventsUsingGETHandler
	// DashboardTokensTotalsControllerGetTokenTotalsUsingGETHandler sets the operation handler for the get token totals using g e t operation
	DashboardTokensTotalsControllerGetTokenTotalsUsingGETHandler dashboard_tokens_totals_controller.GetTokenTotalsUsingGETHandler
	// TokenControllerGetTokenUsingGETHandler sets the operation handler for the get token using g e t operation
	TokenControllerGetTokenUsingGETHandler token_controller.GetTokenUsingGETHandler
	// DashboardTransactionsTotalsControllerGetTotalsUsingGETHandler sets the operation handler for the get totals using g e t operation
	DashboardTransactionsTotalsControllerGetTotalsUsingGETHandler dashboard_transactions_totals_controller.GetTotalsUsingGETHandler
	// DashboardTransactionsTotalsControllerGetTotalsUsingGET1Handler sets the operation handler for the get totals using g e t 1 operation
	DashboardTransactionsTotalsControllerGetTotalsUsingGET1Handler dashboard_transactions_totals_controller.GetTotalsUsingGET1Handler
	// TransactionEventsControllerGetTransactionEventsUsingGETHandler sets the operation handler for the get transaction events using g e t operation
	TransactionEventsControllerGetTransactionEventsUsingGETHandler transaction_events_controller.GetTransactionEventsUsingGETHandler
	// TransactionControllerGetTransactionUsingGETHandler sets the operation handler for the get transaction using g e t operation
	TransactionControllerGetTransactionUsingGETHandler transaction_controller.GetTransactionUsingGETHandler
	// IndexControllerHomePageUsingGETHandler sets the operation handler for the home page using g e t operation
	//IndexControllerHomePageUsingGETHandler index_controller.HomePageUsingGETHandler
	// IndexControllerIndexUsingGETHandler sets the operation handler for the index using g e t operation
	//IndexControllerIndexUsingGETHandler index_controller.IndexUsingGETHandler
	// SearchControllerSearchUsingGETHandler sets the operation handler for the search using g e t operation
	SearchControllerSearchUsingGETHandler search_controller.SearchUsingGETHandler
	// SearchControllerSearchUsingGET1Handler sets the operation handler for the search using g e t 1 operation
	SearchControllerSearchUsingGET1Handler search_controller.SearchUsingGET1Handler
	// MetadataControllerUploadMetadataUsingPOSTHandler sets the operation handler for the upload metadata using p o s t operation
	MetadataControllerUploadMetadataUsingPOSTHandler metadata_controller.UploadMetadataUsingPOSTHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DcnSdkAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DcnSdkAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DcnSdkAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DcnSdkAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DcnSdkAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DcnSdkAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DcnSdkAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DcnSdkAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DcnSdkAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DcnSdkAPI
func (o *DcnSdkAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.EmptyProducer == nil {
		unregistered = append(unregistered, "EmptyProducer")
	}

	if o.AccountMappingControllerAddAccountUsingPOSTHandler == nil {
		unregistered = append(unregistered, "account_mapping_controller.AddAccountUsingPOSTHandler")
	}
	if o.AccountMappingControllerDeleteAccountUsingDELETEHandler == nil {
		unregistered = append(unregistered, "account_mapping_controller.DeleteAccountUsingDELETEHandler")
	}
	if o.MetadataControllerDeleteMetadataUsingDELETEHandler == nil {
		unregistered = append(unregistered, "metadata_controller.DeleteMetadataUsingDELETEHandler")
	}
	if o.NodeControllerDetailsUsingGETHandler == nil {
		unregistered = append(unregistered, "node_controller.DetailsUsingGETHandler")
	}
	if o.AccountMappingControllerEditAccountUsingPUTHandler == nil {
		unregistered = append(unregistered, "account_mapping_controller.EditAccountUsingPUTHandler")
	}
	if o.IndexControllerErrorPageUsingGETHandler == nil {
		unregistered = append(unregistered, "index_controller.ErrorPageUsingGETHandler")
	}
	if o.AccountTransactionsControllerFindAccountTransactionsUsingGETHandler == nil {
		unregistered = append(unregistered, "account_transactions_controller.FindAccountTransactionsUsingGETHandler")
	}
	if o.AccountMappingControllerFindAccountsUsingGETHandler == nil {
		unregistered = append(unregistered, "account_mapping_controller.FindAccountsUsingGETHandler")
	}
	if o.BlockControllerFindBlocksUsingGETHandler == nil {
		unregistered = append(unregistered, "block_controller.FindBlocksUsingGETHandler")
	}
	if o.ContractTransactionsControllerFindContractTransactionsUsingGETHandler == nil {
		unregistered = append(unregistered, "contract_transactions_controller.FindContractTransactionsUsingGETHandler")
	}
	if o.TokenTransactionsControllerFindContractTransactionsUsingGET1Handler == nil {
		unregistered = append(unregistered, "token_transactions_controller.FindContractTransactionsUsingGET1Handler")
	}
	if o.MetadataControllerFindContractsBySwarmHashUsingGETHandler == nil {
		unregistered = append(unregistered, "metadata_controller.FindContractsBySwarmHashUsingGETHandler")
	}
	if o.ContractControllerFindContractsUsingGETHandler == nil {
		unregistered = append(unregistered, "contract_controller.FindContractsUsingGETHandler")
	}
	if o.Erc20TransfersControllerFindERC20TransfersUsingGETHandler == nil {
		unregistered = append(unregistered, "erc_20_transfers_controller.FindERC20TransfersUsingGETHandler")
	}
	if o.Erc721TransfersControllerFindERC721TransfersUsingGETHandler == nil {
		unregistered = append(unregistered, "erc_721_transfers_controller.FindERC721TransfersUsingGETHandler")
	}
	if o.Erc777TransfersControllerFindERC777TransfersUsingGETHandler == nil {
		unregistered = append(unregistered, "erc_777_transfers_controller.FindERC777TransfersUsingGETHandler")
	}
	if o.MetadataControllerFindMetadataUsingGETHandler == nil {
		unregistered = append(unregistered, "metadata_controller.FindMetadataUsingGETHandler")
	}
	if o.TokenControllerFindTokensUsingGETHandler == nil {
		unregistered = append(unregistered, "token_controller.FindTokensUsingGETHandler")
	}
	if o.TransactionControllerFindTransactionsUsingGETHandler == nil {
		unregistered = append(unregistered, "transaction_controller.FindTransactionsUsingGETHandler")
	}
	if o.ConfigurationControllerFrontendConfigurationUsingGETHandler == nil {
		unregistered = append(unregistered, "configuration_controller.FrontendConfigurationUsingGETHandler")
	}
	if o.GasOracleControllerGasPriceInfoUsingGETHandler == nil {
		unregistered = append(unregistered, "gas_oracle_controller.GasPriceInfoUsingGETHandler")
	}
	if o.AccountControllerGetAccountUsingGETHandler == nil {
		unregistered = append(unregistered, "account_controller.GetAccountUsingGETHandler")
	}
	if o.AccountMappingControllerGetAccountUsingGET1Handler == nil {
		unregistered = append(unregistered, "account_mapping_controller.GetAccountUsingGET1Handler")
	}
	if o.BlockTransactionsControllerGetBlockTransactionsUsingGETHandler == nil {
		unregistered = append(unregistered, "block_transactions_controller.GetBlockTransactionsUsingGETHandler")
	}
	if o.BlockControllerGetBlockUsingGETHandler == nil {
		unregistered = append(unregistered, "block_controller.GetBlockUsingGETHandler")
	}
	if o.ContractEventsControllerGetContractEventsUsingGETHandler == nil {
		unregistered = append(unregistered, "contract_events_controller.GetContractEventsUsingGETHandler")
	}
	if o.ContractControllerGetContractUsingGETHandler == nil {
		unregistered = append(unregistered, "contract_controller.GetContractUsingGETHandler")
	}
	if o.DashboardTotalsControllerGetDashboardTotalsUsingGETHandler == nil {
		unregistered = append(unregistered, "dashboard_totals_controller.GetDashboardTotalsUsingGETHandler")
	}
	if o.EventsControllerGetEventsUsingGETHandler == nil {
		unregistered = append(unregistered, "events_controller.GetEventsUsingGETHandler")
	}
	if o.MetadataControllerGetMetadataUsingGETHandler == nil {
		unregistered = append(unregistered, "metadata_controller.GetMetadataUsingGETHandler")
	}
	if o.TokenEventsControllerGetTokenEventsUsingGETHandler == nil {
		unregistered = append(unregistered, "token_events_controller.GetTokenEventsUsingGETHandler")
	}
	if o.DashboardTokensTotalsControllerGetTokenTotalsUsingGETHandler == nil {
		unregistered = append(unregistered, "dashboard_tokens_totals_controller.GetTokenTotalsUsingGETHandler")
	}
	if o.TokenControllerGetTokenUsingGETHandler == nil {
		unregistered = append(unregistered, "token_controller.GetTokenUsingGETHandler")
	}
	if o.DashboardTransactionsTotalsControllerGetTotalsUsingGETHandler == nil {
		unregistered = append(unregistered, "dashboard_transactions_totals_controller.GetTotalsUsingGETHandler")
	}
	if o.DashboardTransactionsTotalsControllerGetTotalsUsingGET1Handler == nil {
		unregistered = append(unregistered, "dashboard_transactions_totals_controller.GetTotalsUsingGET1Handler")
	}
	if o.TransactionEventsControllerGetTransactionEventsUsingGETHandler == nil {
		unregistered = append(unregistered, "transaction_events_controller.GetTransactionEventsUsingGETHandler")
	}
	if o.TransactionControllerGetTransactionUsingGETHandler == nil {
		unregistered = append(unregistered, "transaction_controller.GetTransactionUsingGETHandler")
	}
	//if o.IndexControllerHomePageUsingGETHandler == nil {
	//	unregistered = append(unregistered, "index_controller.HomePageUsingGETHandler")
	//}
	//if o.IndexControllerIndexUsingGETHandler == nil {
	//	unregistered = append(unregistered, "index_controller.IndexUsingGETHandler")
	//}
	if o.SearchControllerSearchUsingGETHandler == nil {
		unregistered = append(unregistered, "search_controller.SearchUsingGETHandler")
	}
	if o.SearchControllerSearchUsingGET1Handler == nil {
		unregistered = append(unregistered, "search_controller.SearchUsingGET1Handler")
	}
	if o.MetadataControllerUploadMetadataUsingPOSTHandler == nil {
		unregistered = append(unregistered, "metadata_controller.UploadMetadataUsingPOSTHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DcnSdkAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DcnSdkAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *DcnSdkAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DcnSdkAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DcnSdkAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "*/*":
			result["*/*"] = o.EmptyProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DcnSdkAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the dcn sdk API
func (o *DcnSdkAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DcnSdkAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mappings"] = account_mapping_controller.NewAddAccountUsingPOST(o.context, o.AccountMappingControllerAddAccountUsingPOSTHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mappings/{id}"] = account_mapping_controller.NewDeleteAccountUsingDELETE(o.context, o.AccountMappingControllerDeleteAccountUsingDELETEHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/metadata/{swarmHash}"] = metadata_controller.NewDeleteMetadataUsingDELETE(o.context, o.MetadataControllerDeleteMetadataUsingDELETEHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/details"] = node_controller.NewDetailsUsingGET(o.context, o.NodeControllerDetailsUsingGETHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mappings/{id}"] = account_mapping_controller.NewEditAccountUsingPUT(o.context, o.AccountMappingControllerEditAccountUsingPUTHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/error"] = index_controller.NewErrorPageUsingGET(o.context, o.IndexControllerErrorPageUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{addressHash}/transactions"] = account_transactions_controller.NewFindAccountTransactionsUsingGET(o.context, o.AccountTransactionsControllerFindAccountTransactionsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mappings"] = account_mapping_controller.NewFindAccountsUsingGET(o.context, o.AccountMappingControllerFindAccountsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/blocks"] = block_controller.NewFindBlocksUsingGET(o.context, o.BlockControllerFindBlocksUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contracts/{addressHash}/transactions"] = contract_transactions_controller.NewFindContractTransactionsUsingGET(o.context, o.ContractTransactionsControllerFindContractTransactionsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}/transactions"] = token_transactions_controller.NewFindContractTransactionsUsingGET1(o.context, o.TokenTransactionsControllerFindContractTransactionsUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metadata/{fileId}/contracts"] = metadata_controller.NewFindContractsBySwarmHashUsingGET(o.context, o.MetadataControllerFindContractsBySwarmHashUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contracts"] = contract_controller.NewFindContractsUsingGET(o.context, o.ContractControllerFindContractsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}/erc20/transfers"] = erc_20_transfers_controller.NewFindERC20TransfersUsingGET(o.context, o.Erc20TransfersControllerFindERC20TransfersUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}/erc721/transfers"] = erc_721_transfers_controller.NewFindERC721TransfersUsingGET(o.context, o.Erc721TransfersControllerFindERC721TransfersUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}/erc777/transfers"] = erc_777_transfers_controller.NewFindERC777TransfersUsingGET(o.context, o.Erc777TransfersControllerFindERC777TransfersUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metadata"] = metadata_controller.NewFindMetadataUsingGET(o.context, o.MetadataControllerFindMetadataUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens"] = token_controller.NewFindTokensUsingGET(o.context, o.TokenControllerFindTokensUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transactions"] = transaction_controller.NewFindTransactionsUsingGET(o.context, o.TransactionControllerFindTransactionsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configuration/frontend"] = configuration_controller.NewFrontendConfigurationUsingGET(o.context, o.ConfigurationControllerFrontendConfigurationUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gas/price"] = gas_oracle_controller.NewGasPriceInfoUsingGET(o.context, o.GasOracleControllerGasPriceInfoUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{addressHash}"] = account_controller.NewGetAccountUsingGET(o.context, o.AccountControllerGetAccountUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mappings/{id}"] = account_mapping_controller.NewGetAccountUsingGET1(o.context, o.AccountMappingControllerGetAccountUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/blocks/{blockHash}/transactions"] = block_transactions_controller.NewGetBlockTransactionsUsingGET(o.context, o.BlockTransactionsControllerGetBlockTransactionsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/blocks/{blockHash}"] = block_controller.NewGetBlockUsingGET(o.context, o.BlockControllerGetBlockUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contracts/{addressHash}/events"] = contract_events_controller.NewGetContractEventsUsingGET(o.context, o.ContractEventsControllerGetContractEventsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contracts/{addressHash}"] = contract_controller.NewGetContractUsingGET(o.context, o.ContractControllerGetContractUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard/totals"] = dashboard_totals_controller.NewGetDashboardTotalsUsingGET(o.context, o.DashboardTotalsControllerGetDashboardTotalsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = events_controller.NewGetEventsUsingGET(o.context, o.EventsControllerGetEventsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metadata/{swarmHash}"] = metadata_controller.NewGetMetadataUsingGET(o.context, o.MetadataControllerGetMetadataUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}/events"] = token_events_controller.NewGetTokenEventsUsingGET(o.context, o.TokenEventsControllerGetTokenEventsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard/tokens/totals"] = dashboard_tokens_totals_controller.NewGetTokenTotalsUsingGET(o.context, o.DashboardTokensTotalsControllerGetTokenTotalsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{addressHash}"] = token_controller.NewGetTokenUsingGET(o.context, o.TokenControllerGetTokenUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard/transactions/totals/{period}"] = dashboard_transactions_totals_controller.NewGetTotalsUsingGET(o.context, o.DashboardTransactionsTotalsControllerGetTotalsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard/transactions/totals"] = dashboard_transactions_totals_controller.NewGetTotalsUsingGET1(o.context, o.DashboardTransactionsTotalsControllerGetTotalsUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transactions/{transactionHash}/events"] = transaction_events_controller.NewGetTransactionEventsUsingGET(o.context, o.TransactionEventsControllerGetTransactionEventsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transactions/{transactionHash}"] = transaction_controller.NewGetTransactionUsingGET(o.context, o.TransactionControllerGetTransactionUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	//o.handlers["GET"][""] = index_controller.NewHomePageUsingGET(o.context, o.IndexControllerHomePageUsingGETHandler)
	//if o.handlers["GET"] == nil {
	//	o.handlers["GET"] = make(map[string]http.Handler)
	//}
	//o.handlers["GET"]["/jwt"] = index_controller.NewIndexUsingGET(o.context, o.IndexControllerIndexUsingGETHandler)
	//if o.handlers["GET"] == nil {
	//	o.handlers["GET"] = make(map[string]http.Handler)
	//}
	o.handlers["GET"]["/search"] = search_controller.NewSearchUsingGET(o.context, o.SearchControllerSearchUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = search_controller.NewSearchUsingGET1(o.context, o.SearchControllerSearchUsingGET1Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/metadata"] = metadata_controller.NewUploadMetadataUsingPOST(o.context, o.MetadataControllerUploadMetadataUsingPOSTHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DcnSdkAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DcnSdkAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DcnSdkAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DcnSdkAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DcnSdkAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
