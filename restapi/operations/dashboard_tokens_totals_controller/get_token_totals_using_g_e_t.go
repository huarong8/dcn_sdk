// Code generated by go-swagger; DO NOT EDIT.

package dashboard_tokens_totals_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTokenTotalsUsingGETHandlerFunc turns a function with the right signature into a get token totals using g e t handler
type GetTokenTotalsUsingGETHandlerFunc func(GetTokenTotalsUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTokenTotalsUsingGETHandlerFunc) Handle(params GetTokenTotalsUsingGETParams) middleware.Responder {
	return fn(params)
}

// GetTokenTotalsUsingGETHandler interface for that can handle valid get token totals using g e t params
type GetTokenTotalsUsingGETHandler interface {
	Handle(GetTokenTotalsUsingGETParams) middleware.Responder
}

// NewGetTokenTotalsUsingGET creates a new http.Handler for the get token totals using g e t operation
func NewGetTokenTotalsUsingGET(ctx *middleware.Context, handler GetTokenTotalsUsingGETHandler) *GetTokenTotalsUsingGET {
	return &GetTokenTotalsUsingGET{Context: ctx, Handler: handler}
}

/* GetTokenTotalsUsingGET swagger:route GET /dashboard/tokens/totals dashboard-tokens-totals-controller getTokenTotalsUsingGET

Retrieve total number of different token types

*/
type GetTokenTotalsUsingGET struct {
	Context *middleware.Context
	Handler GetTokenTotalsUsingGETHandler
}

func (o *GetTokenTotalsUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTokenTotalsUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
