// Code generated by go-swagger; DO NOT EDIT.

package account_transactions_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindAccountTransactionsUsingGETHandlerFunc turns a function with the right signature into a find account transactions using g e t handler
type FindAccountTransactionsUsingGETHandlerFunc func(FindAccountTransactionsUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindAccountTransactionsUsingGETHandlerFunc) Handle(params FindAccountTransactionsUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindAccountTransactionsUsingGETHandler interface for that can handle valid find account transactions using g e t params
type FindAccountTransactionsUsingGETHandler interface {
	Handle(FindAccountTransactionsUsingGETParams) middleware.Responder
}

// NewFindAccountTransactionsUsingGET creates a new http.Handler for the find account transactions using g e t operation
func NewFindAccountTransactionsUsingGET(ctx *middleware.Context, handler FindAccountTransactionsUsingGETHandler) *FindAccountTransactionsUsingGET {
	return &FindAccountTransactionsUsingGET{Context: ctx, Handler: handler}
}

/* FindAccountTransactionsUsingGET swagger:route GET /accounts/{addressHash}/transactions account-transactions-controller findAccountTransactionsUsingGET

Retrieve a contract by its address hash.

*/
type FindAccountTransactionsUsingGET struct {
	Context *middleware.Context
	Handler FindAccountTransactionsUsingGETHandler
}

func (o *FindAccountTransactionsUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindAccountTransactionsUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
