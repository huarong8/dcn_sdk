// Code generated by go-swagger; DO NOT EDIT.

package contract_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetContractUsingGETHandlerFunc turns a function with the right signature into a get contract using g e t handler
type GetContractUsingGETHandlerFunc func(GetContractUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetContractUsingGETHandlerFunc) Handle(params GetContractUsingGETParams) middleware.Responder {
	return fn(params)
}

// GetContractUsingGETHandler interface for that can handle valid get contract using g e t params
type GetContractUsingGETHandler interface {
	Handle(GetContractUsingGETParams) middleware.Responder
}

// NewGetContractUsingGET creates a new http.Handler for the get contract using g e t operation
func NewGetContractUsingGET(ctx *middleware.Context, handler GetContractUsingGETHandler) *GetContractUsingGET {
	return &GetContractUsingGET{Context: ctx, Handler: handler}
}

/* GetContractUsingGET swagger:route GET /contracts/{addressHash} contract-controller getContractUsingGET

Retrieve a contract by its address hash.

*/
type GetContractUsingGET struct {
	Context *middleware.Context
	Handler GetContractUsingGETHandler
}

func (o *GetContractUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetContractUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
