// Code generated by go-swagger; DO NOT EDIT.

package account_mapping_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteAccountUsingDELETEHandlerFunc turns a function with the right signature into a delete account using d e l e t e handler
type DeleteAccountUsingDELETEHandlerFunc func(DeleteAccountUsingDELETEParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAccountUsingDELETEHandlerFunc) Handle(params DeleteAccountUsingDELETEParams) middleware.Responder {
	return fn(params)
}

// DeleteAccountUsingDELETEHandler interface for that can handle valid delete account using d e l e t e params
type DeleteAccountUsingDELETEHandler interface {
	Handle(DeleteAccountUsingDELETEParams) middleware.Responder
}

// NewDeleteAccountUsingDELETE creates a new http.Handler for the delete account using d e l e t e operation
func NewDeleteAccountUsingDELETE(ctx *middleware.Context, handler DeleteAccountUsingDELETEHandler) *DeleteAccountUsingDELETE {
	return &DeleteAccountUsingDELETE{Context: ctx, Handler: handler}
}

/* DeleteAccountUsingDELETE swagger:route DELETE /mappings/{id} account-mapping-controller deleteAccountUsingDELETE

Delete account with corresponding address

*/
type DeleteAccountUsingDELETE struct {
	Context *middleware.Context
	Handler DeleteAccountUsingDELETEHandler
}

func (o *DeleteAccountUsingDELETE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteAccountUsingDELETEParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
