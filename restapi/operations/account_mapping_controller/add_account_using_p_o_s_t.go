// Code generated by go-swagger; DO NOT EDIT.

package account_mapping_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddAccountUsingPOSTHandlerFunc turns a function with the right signature into a add account using p o s t handler
type AddAccountUsingPOSTHandlerFunc func(AddAccountUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddAccountUsingPOSTHandlerFunc) Handle(params AddAccountUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// AddAccountUsingPOSTHandler interface for that can handle valid add account using p o s t params
type AddAccountUsingPOSTHandler interface {
	Handle(AddAccountUsingPOSTParams) middleware.Responder
}

// NewAddAccountUsingPOST creates a new http.Handler for the add account using p o s t operation
func NewAddAccountUsingPOST(ctx *middleware.Context, handler AddAccountUsingPOSTHandler) *AddAccountUsingPOST {
	return &AddAccountUsingPOST{Context: ctx, Handler: handler}
}

/* AddAccountUsingPOST swagger:route POST /mappings account-mapping-controller addAccountUsingPOST

Add account with corresponding address and label

*/
type AddAccountUsingPOST struct {
	Context *middleware.Context
	Handler AddAccountUsingPOSTHandler
}

func (o *AddAccountUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddAccountUsingPOSTParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
