// Code generated by go-swagger; DO NOT EDIT.

package erc_20_transfers_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindERC20TransfersUsingGETHandlerFunc turns a function with the right signature into a find e r c20 transfers using g e t handler
type FindERC20TransfersUsingGETHandlerFunc func(FindERC20TransfersUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindERC20TransfersUsingGETHandlerFunc) Handle(params FindERC20TransfersUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindERC20TransfersUsingGETHandler interface for that can handle valid find e r c20 transfers using g e t params
type FindERC20TransfersUsingGETHandler interface {
	Handle(FindERC20TransfersUsingGETParams) middleware.Responder
}

// NewFindERC20TransfersUsingGET creates a new http.Handler for the find e r c20 transfers using g e t operation
func NewFindERC20TransfersUsingGET(ctx *middleware.Context, handler FindERC20TransfersUsingGETHandler) *FindERC20TransfersUsingGET {
	return &FindERC20TransfersUsingGET{Context: ctx, Handler: handler}
}

/* FindERC20TransfersUsingGET swagger:route GET /tokens/{addressHash}/erc20/transfers erc-20-transfers-controller findERC20TransfersUsingGET

Retrieve transfers of an ERC20 Token.

*/
type FindERC20TransfersUsingGET struct {
	Context *middleware.Context
	Handler FindERC20TransfersUsingGETHandler
}

func (o *FindERC20TransfersUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindERC20TransfersUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
