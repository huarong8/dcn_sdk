// Code generated by go-swagger; DO NOT EDIT.

package configuration_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FrontendConfigurationUsingGETHandlerFunc turns a function with the right signature into a frontend configuration using g e t handler
type FrontendConfigurationUsingGETHandlerFunc func(FrontendConfigurationUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FrontendConfigurationUsingGETHandlerFunc) Handle(params FrontendConfigurationUsingGETParams) middleware.Responder {
	return fn(params)
}

// FrontendConfigurationUsingGETHandler interface for that can handle valid frontend configuration using g e t params
type FrontendConfigurationUsingGETHandler interface {
	Handle(FrontendConfigurationUsingGETParams) middleware.Responder
}

// NewFrontendConfigurationUsingGET creates a new http.Handler for the frontend configuration using g e t operation
func NewFrontendConfigurationUsingGET(ctx *middleware.Context, handler FrontendConfigurationUsingGETHandler) *FrontendConfigurationUsingGET {
	return &FrontendConfigurationUsingGET{Context: ctx, Handler: handler}
}

/* FrontendConfigurationUsingGET swagger:route GET /configuration/frontend configuration-controller frontendConfigurationUsingGET

Epirus frontend configuration.

*/
type FrontendConfigurationUsingGET struct {
	Context *middleware.Context
	Handler FrontendConfigurationUsingGETHandler
}

func (o *FrontendConfigurationUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFrontendConfigurationUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
