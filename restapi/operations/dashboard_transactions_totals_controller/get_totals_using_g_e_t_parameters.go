// Code generated by go-swagger; DO NOT EDIT.

package dashboard_transactions_totals_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetTotalsUsingGETParams creates a new GetTotalsUsingGETParams object
//
// There are no default values defined in the spec.
func NewGetTotalsUsingGETParams() GetTotalsUsingGETParams {

	return GetTotalsUsingGETParams{}
}

// GetTotalsUsingGETParams contains all the bound params for the get totals using g e t operation
// typically these are obtained from a http.Request
//
// swagger:parameters getTotalsUsingGET
type GetTotalsUsingGETParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*from
	  In: query
	*/
	From *int64
	/*period
	  Required: true
	  In: path
	*/
	Period string
	/*to
	  In: query
	*/
	To *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTotalsUsingGETParams() beforehand.
func (o *GetTotalsUsingGETParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFrom, qhkFrom, _ := qs.GetOK("from")
	if err := o.bindFrom(qFrom, qhkFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	rPeriod, rhkPeriod, _ := route.Params.GetOK("period")
	if err := o.bindPeriod(rPeriod, rhkPeriod, route.Formats); err != nil {
		res = append(res, err)
	}

	qTo, qhkTo, _ := qs.GetOK("to")
	if err := o.bindTo(qTo, qhkTo, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFrom binds and validates parameter From from query.
func (o *GetTotalsUsingGETParams) bindFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("from", "query", "int64", raw)
	}
	o.From = &value

	return nil
}

// bindPeriod binds and validates parameter Period from path.
func (o *GetTotalsUsingGETParams) bindPeriod(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Period = raw

	if err := o.validatePeriod(formats); err != nil {
		return err
	}

	return nil
}

// validatePeriod carries on validations for parameter Period
func (o *GetTotalsUsingGETParams) validatePeriod(formats strfmt.Registry) error {

	if err := validate.EnumCase("period", "path", o.Period, []interface{}{"Nanos", "Micros", "Millis", "Seconds", "Minutes", "Hours", "HalfDays", "Days", "Weeks", "Months", "Years", "Decades", "Centuries", "Millennia", "Eras", "Forever"}, true); err != nil {
		return err
	}

	return nil
}

// bindTo binds and validates parameter To from query.
func (o *GetTotalsUsingGETParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("to", "query", "int64", raw)
	}
	o.To = &value

	return nil
}
