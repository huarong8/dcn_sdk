// Code generated by go-swagger; DO NOT EDIT.

package erc_721_transfers_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindERC721TransfersUsingGETHandlerFunc turns a function with the right signature into a find e r c721 transfers using g e t handler
type FindERC721TransfersUsingGETHandlerFunc func(FindERC721TransfersUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindERC721TransfersUsingGETHandlerFunc) Handle(params FindERC721TransfersUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindERC721TransfersUsingGETHandler interface for that can handle valid find e r c721 transfers using g e t params
type FindERC721TransfersUsingGETHandler interface {
	Handle(FindERC721TransfersUsingGETParams) middleware.Responder
}

// NewFindERC721TransfersUsingGET creates a new http.Handler for the find e r c721 transfers using g e t operation
func NewFindERC721TransfersUsingGET(ctx *middleware.Context, handler FindERC721TransfersUsingGETHandler) *FindERC721TransfersUsingGET {
	return &FindERC721TransfersUsingGET{Context: ctx, Handler: handler}
}

/* FindERC721TransfersUsingGET swagger:route GET /tokens/{addressHash}/erc721/transfers erc-721-transfers-controller findERC721TransfersUsingGET

Retrieve transfers of an ERC721 Token.

*/
type FindERC721TransfersUsingGET struct {
	Context *middleware.Context
	Handler FindERC721TransfersUsingGETHandler
}

func (o *FindERC721TransfersUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindERC721TransfersUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
