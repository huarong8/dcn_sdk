// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetadataUsingGETHandlerFunc turns a function with the right signature into a get metadata using g e t handler
type GetMetadataUsingGETHandlerFunc func(GetMetadataUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataUsingGETHandlerFunc) Handle(params GetMetadataUsingGETParams) middleware.Responder {
	return fn(params)
}

// GetMetadataUsingGETHandler interface for that can handle valid get metadata using g e t params
type GetMetadataUsingGETHandler interface {
	Handle(GetMetadataUsingGETParams) middleware.Responder
}

// NewGetMetadataUsingGET creates a new http.Handler for the get metadata using g e t operation
func NewGetMetadataUsingGET(ctx *middleware.Context, handler GetMetadataUsingGETHandler) *GetMetadataUsingGET {
	return &GetMetadataUsingGET{Context: ctx, Handler: handler}
}

/* GetMetadataUsingGET swagger:route GET /metadata/{swarmHash} metadata-controller getMetadataUsingGET

Retrieve metadata.

*/
type GetMetadataUsingGET struct {
	Context *middleware.Context
	Handler GetMetadataUsingGETHandler
}

func (o *GetMetadataUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetadataUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
