// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteMetadataUsingDELETEHandlerFunc turns a function with the right signature into a delete metadata using d e l e t e handler
type DeleteMetadataUsingDELETEHandlerFunc func(DeleteMetadataUsingDELETEParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMetadataUsingDELETEHandlerFunc) Handle(params DeleteMetadataUsingDELETEParams) middleware.Responder {
	return fn(params)
}

// DeleteMetadataUsingDELETEHandler interface for that can handle valid delete metadata using d e l e t e params
type DeleteMetadataUsingDELETEHandler interface {
	Handle(DeleteMetadataUsingDELETEParams) middleware.Responder
}

// NewDeleteMetadataUsingDELETE creates a new http.Handler for the delete metadata using d e l e t e operation
func NewDeleteMetadataUsingDELETE(ctx *middleware.Context, handler DeleteMetadataUsingDELETEHandler) *DeleteMetadataUsingDELETE {
	return &DeleteMetadataUsingDELETE{Context: ctx, Handler: handler}
}

/* DeleteMetadataUsingDELETE swagger:route DELETE /metadata/{swarmHash} metadata-controller deleteMetadataUsingDELETE

Delete metadata.

*/
type DeleteMetadataUsingDELETE struct {
	Context *middleware.Context
	Handler DeleteMetadataUsingDELETEHandler
}

func (o *DeleteMetadataUsingDELETE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteMetadataUsingDELETEParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
