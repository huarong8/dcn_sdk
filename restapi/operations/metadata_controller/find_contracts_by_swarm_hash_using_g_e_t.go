// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindContractsBySwarmHashUsingGETHandlerFunc turns a function with the right signature into a find contracts by swarm hash using g e t handler
type FindContractsBySwarmHashUsingGETHandlerFunc func(FindContractsBySwarmHashUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindContractsBySwarmHashUsingGETHandlerFunc) Handle(params FindContractsBySwarmHashUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindContractsBySwarmHashUsingGETHandler interface for that can handle valid find contracts by swarm hash using g e t params
type FindContractsBySwarmHashUsingGETHandler interface {
	Handle(FindContractsBySwarmHashUsingGETParams) middleware.Responder
}

// NewFindContractsBySwarmHashUsingGET creates a new http.Handler for the find contracts by swarm hash using g e t operation
func NewFindContractsBySwarmHashUsingGET(ctx *middleware.Context, handler FindContractsBySwarmHashUsingGETHandler) *FindContractsBySwarmHashUsingGET {
	return &FindContractsBySwarmHashUsingGET{Context: ctx, Handler: handler}
}

/* FindContractsBySwarmHashUsingGET swagger:route GET /metadata/{fileId}/contracts metadata-controller findContractsBySwarmHashUsingGET

list contracts by swarmhash

*/
type FindContractsBySwarmHashUsingGET struct {
	Context *middleware.Context
	Handler FindContractsBySwarmHashUsingGETHandler
}

func (o *FindContractsBySwarmHashUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindContractsBySwarmHashUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
