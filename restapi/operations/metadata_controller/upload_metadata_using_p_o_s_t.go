// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadMetadataUsingPOSTHandlerFunc turns a function with the right signature into a upload metadata using p o s t handler
type UploadMetadataUsingPOSTHandlerFunc func(UploadMetadataUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadMetadataUsingPOSTHandlerFunc) Handle(params UploadMetadataUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// UploadMetadataUsingPOSTHandler interface for that can handle valid upload metadata using p o s t params
type UploadMetadataUsingPOSTHandler interface {
	Handle(UploadMetadataUsingPOSTParams) middleware.Responder
}

// NewUploadMetadataUsingPOST creates a new http.Handler for the upload metadata using p o s t operation
func NewUploadMetadataUsingPOST(ctx *middleware.Context, handler UploadMetadataUsingPOSTHandler) *UploadMetadataUsingPOST {
	return &UploadMetadataUsingPOST{Context: ctx, Handler: handler}
}

/* UploadMetadataUsingPOST swagger:route POST /metadata metadata-controller uploadMetadataUsingPOST

uploadMetadata

*/
type UploadMetadataUsingPOST struct {
	Context *middleware.Context
	Handler UploadMetadataUsingPOSTHandler
}

func (o *UploadMetadataUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadMetadataUsingPOSTParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
