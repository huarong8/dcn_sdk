// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindMetadataUsingGETHandlerFunc turns a function with the right signature into a find metadata using g e t handler
type FindMetadataUsingGETHandlerFunc func(FindMetadataUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindMetadataUsingGETHandlerFunc) Handle(params FindMetadataUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindMetadataUsingGETHandler interface for that can handle valid find metadata using g e t params
type FindMetadataUsingGETHandler interface {
	Handle(FindMetadataUsingGETParams) middleware.Responder
}

// NewFindMetadataUsingGET creates a new http.Handler for the find metadata using g e t operation
func NewFindMetadataUsingGET(ctx *middleware.Context, handler FindMetadataUsingGETHandler) *FindMetadataUsingGET {
	return &FindMetadataUsingGET{Context: ctx, Handler: handler}
}

/* FindMetadataUsingGET swagger:route GET /metadata metadata-controller findMetadataUsingGET

list metadata.

*/
type FindMetadataUsingGET struct {
	Context *middleware.Context
	Handler FindMetadataUsingGETHandler
}

func (o *FindMetadataUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindMetadataUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
