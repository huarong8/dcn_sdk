// Code generated by go-swagger; DO NOT EDIT.

package metadata_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetMetadataUsingGETParams creates a new GetMetadataUsingGETParams object
//
// There are no default values defined in the spec.
func NewGetMetadataUsingGETParams() GetMetadataUsingGETParams {

	return GetMetadataUsingGETParams{}
}

// GetMetadataUsingGETParams contains all the bound params for the get metadata using g e t operation
// typically these are obtained from a http.Request
//
// swagger:parameters getMetadataUsingGET
type GetMetadataUsingGETParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The swarm hash of the metadata.
	  In: path
	*/
	SwarmHash *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMetadataUsingGETParams() beforehand.
func (o *GetMetadataUsingGETParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rSwarmHash, rhkSwarmHash, _ := route.Params.GetOK("swarmHash")
	if err := o.bindSwarmHash(rSwarmHash, rhkSwarmHash, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindSwarmHash binds and validates parameter SwarmHash from path.
func (o *GetMetadataUsingGETParams) bindSwarmHash(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// Parameter is provided by construction from the route
	o.SwarmHash = &raw

	return nil
}
