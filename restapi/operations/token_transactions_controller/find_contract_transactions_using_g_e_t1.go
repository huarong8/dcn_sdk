// Code generated by go-swagger; DO NOT EDIT.

package token_transactions_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindContractTransactionsUsingGET1HandlerFunc turns a function with the right signature into a find contract transactions using g e t 1 handler
type FindContractTransactionsUsingGET1HandlerFunc func(FindContractTransactionsUsingGET1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn FindContractTransactionsUsingGET1HandlerFunc) Handle(params FindContractTransactionsUsingGET1Params) middleware.Responder {
	return fn(params)
}

// FindContractTransactionsUsingGET1Handler interface for that can handle valid find contract transactions using g e t 1 params
type FindContractTransactionsUsingGET1Handler interface {
	Handle(FindContractTransactionsUsingGET1Params) middleware.Responder
}

// NewFindContractTransactionsUsingGET1 creates a new http.Handler for the find contract transactions using g e t 1 operation
func NewFindContractTransactionsUsingGET1(ctx *middleware.Context, handler FindContractTransactionsUsingGET1Handler) *FindContractTransactionsUsingGET1 {
	return &FindContractTransactionsUsingGET1{Context: ctx, Handler: handler}
}

/* FindContractTransactionsUsingGET1 swagger:route GET /tokens/{addressHash}/transactions token-transactions-controller findContractTransactionsUsingGET1

Retrieve token transactions by token address hash.

*/
type FindContractTransactionsUsingGET1 struct {
	Context *middleware.Context
	Handler FindContractTransactionsUsingGET1Handler
}

func (o *FindContractTransactionsUsingGET1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindContractTransactionsUsingGET1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
