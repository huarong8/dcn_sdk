// Code generated by go-swagger; DO NOT EDIT.

package block_transactions_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBlockTransactionsUsingGETHandlerFunc turns a function with the right signature into a get block transactions using g e t handler
type GetBlockTransactionsUsingGETHandlerFunc func(GetBlockTransactionsUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBlockTransactionsUsingGETHandlerFunc) Handle(params GetBlockTransactionsUsingGETParams) middleware.Responder {
	return fn(params)
}

// GetBlockTransactionsUsingGETHandler interface for that can handle valid get block transactions using g e t params
type GetBlockTransactionsUsingGETHandler interface {
	Handle(GetBlockTransactionsUsingGETParams) middleware.Responder
}

// NewGetBlockTransactionsUsingGET creates a new http.Handler for the get block transactions using g e t operation
func NewGetBlockTransactionsUsingGET(ctx *middleware.Context, handler GetBlockTransactionsUsingGETHandler) *GetBlockTransactionsUsingGET {
	return &GetBlockTransactionsUsingGET{Context: ctx, Handler: handler}
}

/* GetBlockTransactionsUsingGET swagger:route GET /blocks/{blockHash}/transactions block-transactions-controller getBlockTransactionsUsingGET

Retrieve all transactions for this block.

*/
type GetBlockTransactionsUsingGET struct {
	Context *middleware.Context
	Handler GetBlockTransactionsUsingGETHandler
}

func (o *GetBlockTransactionsUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBlockTransactionsUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
