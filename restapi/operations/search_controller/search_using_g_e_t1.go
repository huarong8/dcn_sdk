// Code generated by go-swagger; DO NOT EDIT.

package search_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchUsingGET1HandlerFunc turns a function with the right signature into a search using g e t 1 handler
type SearchUsingGET1HandlerFunc func(SearchUsingGET1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchUsingGET1HandlerFunc) Handle(params SearchUsingGET1Params) middleware.Responder {
	return fn(params)
}

// SearchUsingGET1Handler interface for that can handle valid search using g e t 1 params
type SearchUsingGET1Handler interface {
	Handle(SearchUsingGET1Params) middleware.Responder
}

// NewSearchUsingGET1 creates a new http.Handler for the search using g e t 1 operation
func NewSearchUsingGET1(ctx *middleware.Context, handler SearchUsingGET1Handler) *SearchUsingGET1 {
	return &SearchUsingGET1{Context: ctx, Handler: handler}
}

/* SearchUsingGET1 swagger:route GET /search/ search-controller searchUsingGET1

Retrieve blocks, transactions, accounts by hash.

*/
type SearchUsingGET1 struct {
	Context *middleware.Context
	Handler SearchUsingGET1Handler
}

func (o *SearchUsingGET1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchUsingGET1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
