//// Code generated by go-swagger; DO NOT EDIT.
//
package index_controller
//
//// This file was generated by the swagger tool.
//// Editing this file might prove futile when you re-run the generate command
//
//import (
//	"net/http"
//
//	"github.com/go-openapi/runtime/middleware"
//)
//
//// IndexUsingGETHandlerFunc turns a function with the right signature into a index using g e t handler
//type IndexUsingGETHandlerFunc func(IndexUsingGETParams) middleware.Responder
//
//// Handle executing the request and returning a response
//func (fn IndexUsingGETHandlerFunc) Handle(params IndexUsingGETParams) middleware.Responder {
//	return fn(params)
//}
//
//// IndexUsingGETHandler interface for that can handle valid index using g e t params
//type IndexUsingGETHandler interface {
//	Handle(IndexUsingGETParams) middleware.Responder
//}
//
//// NewIndexUsingGET creates a new http.Handler for the index using g e t operation
//func NewIndexUsingGET(ctx *middleware.Context, handler IndexUsingGETHandler) *IndexUsingGET {
//	return &IndexUsingGET{Context: ctx, Handler: handler}
//}
//
///* IndexUsingGET swagger:route GET /jwt index-controller indexUsingGET
//
//index
//
//*/
//type IndexUsingGET struct {
//	Context *middleware.Context
//	Handler IndexUsingGETHandler
//}
//
//func (o *IndexUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
//	route, rCtx, _ := o.Context.RouteInfo(r)
//	if rCtx != nil {
//		*r = *rCtx
//	}
//	var Params = NewIndexUsingGETParams()
//	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
//		o.Context.Respond(rw, r, route.Produces, route, err)
//		return
//	}
//
//	res := o.Handler.Handle(Params) // actually handle the request
//	o.Context.Respond(rw, r, route.Produces, route, res)
//
//}
