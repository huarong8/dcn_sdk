//// Code generated by go-swagger; DO NOT EDIT.
//
package index_controller
//
//// This file was generated by the swagger tool.
//// Editing this file might prove futile when you re-run the swagger generate command
//
//import (
//	"net/http"
//
//	"github.com/go-openapi/errors"
//	"github.com/go-openapi/runtime"
//	"github.com/go-openapi/runtime/middleware"
//	"github.com/go-openapi/strfmt"
//)
//
//// NewIndexUsingGETParams creates a new IndexUsingGETParams object
////
//// There are no default values defined in the spec.
//func NewIndexUsingGETParams() IndexUsingGETParams {
//
//	return IndexUsingGETParams{}
//}
//
//// IndexUsingGETParams contains all the bound params for the index using g e t operation
//// typically these are obtained from a http.Request
////
//// swagger:parameters indexUsingGET
//type IndexUsingGETParams struct {
//
//	// HTTP Request Object
//	HTTPRequest *http.Request `json:"-"`
//
//	/*
//	  In: query
//	*/
//	Claims *object
//	/*
//	  In: query
//	*/
//	Headers *object
//	/*
//	  In: query
//	*/
//	TokenValue *string
//}
//
//// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
//// for simple values it will use straight method calls.
////
//// To ensure default values, the struct must have been initialized with NewIndexUsingGETParams() beforehand.
//func (o *IndexUsingGETParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
//	var res []error
//
//	o.HTTPRequest = r
//
//	qs := runtime.Values(r.URL.Query())
//
//	qClaims, qhkClaims, _ := qs.GetOK("claims")
//	if err := o.bindClaims(qClaims, qhkClaims, route.Formats); err != nil {
//		res = append(res, err)
//	}
//
//	qHeaders, qhkHeaders, _ := qs.GetOK("headers")
//	if err := o.bindHeaders(qHeaders, qhkHeaders, route.Formats); err != nil {
//		res = append(res, err)
//	}
//
//	qTokenValue, qhkTokenValue, _ := qs.GetOK("tokenValue")
//	if err := o.bindTokenValue(qTokenValue, qhkTokenValue, route.Formats); err != nil {
//		res = append(res, err)
//	}
//	if len(res) > 0 {
//		return errors.CompositeValidationError(res...)
//	}
//	return nil
//}
//
//// bindTokenValue binds and validates parameter TokenValue from query.
//func (o *IndexUsingGETParams) bindTokenValue(rawData []string, hasKey bool, formats strfmt.Registry) error {
//	var raw string
//	if len(rawData) > 0 {
//		raw = rawData[len(rawData)-1]
//	}
//
//	// Required: false
//	// AllowEmptyValue: false
//
//	if raw == "" { // empty values pass all other validations
//		return nil
//	}
//	o.TokenValue = &raw
//
//	return nil
//}
