// Code generated by go-swagger; DO NOT EDIT.

package index_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ErrorPageUsingGETHandlerFunc turns a function with the right signature into a error page using g e t handler
type ErrorPageUsingGETHandlerFunc func(ErrorPageUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ErrorPageUsingGETHandlerFunc) Handle(params ErrorPageUsingGETParams) middleware.Responder {
	return fn(params)
}

// ErrorPageUsingGETHandler interface for that can handle valid error page using g e t params
type ErrorPageUsingGETHandler interface {
	Handle(ErrorPageUsingGETParams) middleware.Responder
}

// NewErrorPageUsingGET creates a new http.Handler for the error page using g e t operation
func NewErrorPageUsingGET(ctx *middleware.Context, handler ErrorPageUsingGETHandler) *ErrorPageUsingGET {
	return &ErrorPageUsingGET{Context: ctx, Handler: handler}
}

/* ErrorPageUsingGET swagger:route GET /error index-controller errorPageUsingGET

Redirects to the API error page.

*/
type ErrorPageUsingGET struct {
	Context *middleware.Context
	Handler ErrorPageUsingGETHandler
}

func (o *ErrorPageUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewErrorPageUsingGETParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
